import numpy as np
import torch
import torch.nn as nn
def ID1():
    '''
        Personal ID of the first student.
    '''
    # Insert your ID here
    return 000000000

def ID2():
    '''
        Personal ID of the second student. Fill this only if you were allowed to submit in pairs, Otherwise leave it zeros.
    '''
    # Insert your ID here
    return 000000000

class CNN(nn.Module):
    def __init__(self):  # You can adjust the dropout probability
        super(CNN, self).__init__()
        self.n = 4
        kernel_size = 7
        padding = (kernel_size-1)//2
        dropout_prob=0.2
        
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=self.n, kernel_size=kernel_size, padding=padding)
        self.bn1 = nn.BatchNorm2d(self.n)
        self.downsample1 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv2 = nn.Conv2d(in_channels=self.n, out_channels=2*self.n, kernel_size=kernel_size, padding=padding)
        self.bn2 = nn.BatchNorm2d(2*self.n)
        self.downsample2 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv3 = nn.Conv2d(in_channels=2*self.n, out_channels=4*self.n, kernel_size=kernel_size, padding=padding)
        self.bn3 = nn.BatchNorm2d(4*self.n)
        self.downsample3 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv4 = nn.Conv2d(in_channels=4*self.n, out_channels=8*self.n, kernel_size=kernel_size, padding=padding)
        self.bn4 = nn.BatchNorm2d(8*self.n)
        self.downsample4 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.fc1 = nn.Linear(8 * self.n * 28 * 14, 100)  # 28 = 448/(2**4) , 14 = 224/(2**4) 
        self.fc2 = nn.Linear(100, 2)
        self.dtopout = nn.Dropout(p=dropout_prob)
        self.dropout2d = nn.Dropout2d(p=dropout_prob)
    
    def forward(self, inp):
        out = self.conv1(inp)
        out = self.bn1(out)
        out = nn.functional.relu(out)
        out = self.downsample1(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = nn.functional.relu(out)
        out = self.downsample2(out)
        out = self.dropout2d(out)

        out = self.conv3(out)
        out = self.bn3(out)
        out = nn.functional.relu(out)
        out = self.downsample3(out)
        out = self.dropout2d(out)

        out = self.conv4(out)
        out = self.bn4(out)
        out = nn.functional.relu(out)
        out = self.downsample4(out)
    
        out = out.reshape(-1, 8 * self.n * 28 * 14)
        out = self.fc1(out)
        out = nn.functional.relu(out)
        out = self.dtopout(out)
        out = self.fc2(out)

        return out
    
class CNNChannel(nn.Module):
    def __init__(self):# Do NOT change the signature of this function
        super(CNNChannel, self).__init__()
        self.n = 16
        kernel_size = 5
        padding = (kernel_size-1)//2
        dropout_prob=0.4
        
        self.conv1 = nn.Conv2d(in_channels=6, out_channels=self.n, kernel_size=kernel_size, padding=padding)
        self.downsample1 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv2 = nn.Conv2d(in_channels=self.n ,out_channels=2*self.n, kernel_size=kernel_size, padding=padding)
        self.downsample2 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv3 = nn.Conv2d(in_channels=2*self.n ,out_channels=4*self.n, kernel_size=kernel_size, padding=padding)
        self.downsample3 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv4 = nn.Conv2d(in_channels=4*self.n ,out_channels=8*self.n, kernel_size=kernel_size, padding=padding)
        self.downsample4 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.fc1 = nn.Linear(8 * self.n * 14 * 14, 100)  # 14 = 224/(2**4) , 14 = 224/(2**4) 
        self.fc2 = nn.Linear(100, 2)
        self.dtopout = nn.Dropout(p=dropout_prob)
        self.dropout2d = nn.Dropout2d(p=dropout_prob)

    def forward(self,inp):# Do NOT change the signature of this function
        '''
          prerequests:
          parameter inp: the input image, pytorch tensor
          inp.shape == (N,3,448,224):
            N   := batch size
            3   := RGB channels
            448 := Height
            224 := Width
          
          return output, pytorch tensor
          output.shape == (N,2):
            N := batch size
            2 := same/different pair
        '''
        out = torch.cat((inp[:, :, :224, :], inp[:, :, 224:, :]), dim=1)

        out = self.conv1(out)
        out = nn.functional.relu(out)
        out = self.downsample1(out)

        out = self.conv2(out)
        out = nn.functional.relu(out)
        out = self.downsample2(out)
        out = self.dropout2d(out)

        out = self.conv3(out)
        out = nn.functional.relu(out)
        out = self.downsample3(out)
        out = self.dropout2d(out)

        out = self.conv4(out)
        out = nn.functional.relu(out)
        out = self.downsample4(out)

        # out = out.view(-1, 8 * self.n * 14 * 14)
        out = out.reshape(-1, 8 * self.n * 14 * 14)
        out = self.fc1(out)
        out = nn.functional.relu(out)
        out = self.dtopout(out)
        out = self.fc2(out)
        
        return out
    
